<?xml version="1.0" encoding="utf-8"?>
<renderers:CircleCanvas xmlns:mx="http://www.adobe.com/2006/mxml" width="{CircleLabelView.radius * 2}" height="{CircleLabelView.radius * 2}" horizontalScrollPolicy="off" verticalScrollPolicy="off"
	xmlns:renderers="renderers.*"
	creationComplete="init()">
	
	<mx:Text text="{text}" toolTip="{text}" width="50" styleName="nodeLabel" selectable="false" horizontalCenter="0" verticalCenter="0"/>	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import util.UtilFunc;
			import mx.effects.Glow;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import mx.core.Application;
			import modeldisplay.Model;
			
			[Bindable]
			public static var radius:int = 30;
			
			protected var _text:String;
			[Bindable]
			public function get text():String
			{
				return _text;
			}
			public function set text(value:String):void
			{
				_text = value;
			}
			
			/** is this component fully created? */
			protected var created: Boolean = false;
			public static var NodeColors:Array = [
				0xFFF000,
				0x000FFF,
				0xFF00FF,
				0x0000FF,
				0x00FF00,
				0xFFA500,
				0xFF0000,
				0xCCCC00,
				0x00CCCC,
				0xCC00CC];
			
			protected var _data:Object;
			override public function set data(value:Object):void
			{
				super.data = value;
				_data = value;
				if(created)
					applyData();
			}
			
			/** called when this component and its child components are fully created. */
			private function init():void
			{
				created = true;
				if(_data != null)
					applyData();
			}
//			private function app():Model{
//				return this.parent;
//			}
			private function applyData(): void {
				if (_data.data is XML)
				{
					var nodeXML:XML = _data.data as XML
					bgColor = CircleLabelView.NodeColors[UtilFunc.hash(nodeXML.Uri, 10)];
					text = nodeXML.Label;
				}
			}
			
			/* This function gets called whenever the graph's current item changes,
			 * or when our data changes, to calculate the borderthickness.
			 */
//			private function calcFilters(currentItem: Item, item: Item): Array {
//				if(this.parent.roamer.currentItem == item) {
//					return [new GlowFilter(0xFFFF00, 0.5, 8, 8, 2, 1)];
//				} else if(this.parent.roamer.hasBeenCurrentItem(item)) {
//					return [new GlowFilter(0x0000FF, 0.3, 6, 6, 2, 1)];
//				} else {
//					return null;
//				}
//			}
		]]>
	</mx:Script>				
</renderers:CircleCanvas>
				